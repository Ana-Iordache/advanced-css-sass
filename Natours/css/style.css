/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header {
    height: 95vh;
    /* to right - start from the left and go to the right-bottom corner */
    background-image: linear-gradient(to right bottom, #7ed56fc5, #28b485c5), url(../img/hero.jpg);
    background-size: cover;
    background-position: top; /* the top of the image stays the same as the image is redimensioned */
    position: relative;

    clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
    /* 
        - starting from the left top corner, which is the first set of numbers, we want to stay in place => 0 0
        - move to the right top corner by 100% on x axis away from the left side (first corner)
        - then move to the right bottom corner, 100% on the x axis, BUT on the y axis only with 75%
        - and finally, move to the left bottom corner by 0 on x axis away from the very first corner and 100% on y
    */
}

.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    height: 35px; /* width is automatically figured out by the browser */
}

.text-box {
    position: absolute;

    /* these two are related to the parent element*/
    top: 50%;
    left: 50%;

    /* these two 50% are direclty related to the current element
    it will shift half of the width to te left side, and the same for the height */
    transform: translate(-50%, -50%);

    text-align: center; /* this will align all the inloine elements int he center */
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    /* some hack to stop the element from 'shaking' a bit to the top when the anmation ends */
    backface-visibility: hidden;
    margin-bottom: 60px;
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 1s;

    /* 
    how the animation will proceed; how fast or slow the specified parameters in keyframe will happend over time  
    https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function
    */
    animation-timing-function: ease-out;

    /* animation happens 3 times */
    /* animation-iteration-count: 3; */

    /* before animations starts to play, wait for 3 sec */
    /* animation-delay: 3s; */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;

    /* shorthand for all the animation properties, the CSS will figure out which is what */
    animation: moveInRight 1s ease-out;
}

/*
    ANIMATIONS:
    1) transition property, and change the properties that we want to animate
    2) specify the steps of the anymations with the keyframes
*/

@keyframes moveInLeft {
    /* before the animation starts */
    0% {
        opacity: 0;
        /* we want to be more on the left than in the beginning*/
        transform: translateX(-100px) /*rotate(-50deg)*/;
    }

    /* 60% {
        transform: rotate(180deg);
    } */

    /* in between */
    80% {
        /* move a little bit more to the right */
        transform: translateX(10px);
    }

    /* when the animation finish */
    100% {
        opacity: 1;
        /* in the exaclty place that is now in the document  */
        transform: translateX(0);
    }
}

@keyframes moveInRight {
    /* before the animation starts */
    0% {
        opacity: 0;
        /* we want to be more on the left than in the beginning*/
        transform: translateX(100px);
    }

    /* in between */
    80% {
        /* move a little bit more to the right */
        transform: translateX(-10px);
    }

    /* when the animation finish */
    100% {
        opacity: 1;
        /* in the exaclty place that is now in the document  */
        transform: translateX(0);
    }
}

@keyframes moveInButton {
    0% {
        opacity: 0;
        transform: translateY(30px);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

.btn:link,
.btn:visited {
    display: inline-block;
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    border-radius: 100px;
    transition: all .2s; /* all the properties are enabled to be animated; transitions must be set on the initial states */
    position: relative;
}

.btn:hover {
    transform: translateY(-3px);

    /* x y blur color*/
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); 
}

.btn:active {
    transform: translateY(-1px); /* related to the initial state, not to the hover state */
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2); 
}

.btn-white {
    background-color: #fff;
    color: #777;
}

.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn-white::after {
    background-color: #fff;
}

/* after element only when we hover the button */
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6); /* increase the element */
    opacity: 0; /* fading out */
}

.btn-animated {
    animation: moveInButton .5s ease-out .75s;
    /* .75s for delay */
    animation-fill-mode: backwards; /* applies the styles of the 0% before the animation starts */
}